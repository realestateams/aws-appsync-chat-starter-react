---
swagger: '2.0'
info:
  description: 'created for graphql generation'
  version: 1.0.0
  title: Test Doc
tags:
- name: conversation
  description: Everything about your Conversations
- name: message
  description: Access to Messages
- name: user
  description: Operations about user
- name: ai
  description: Operations about AI
schemes:
- http
paths:
  "/conversation":
    post:
      tags:
      - conversation
      summary: Add a new conversation
      description: ''
      operationId: createConvo
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Conversation object that needs to be added to the store
        required: true
        schema:
          "$ref": "#/definitions/Conversation"
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/Conversation"
        '404':
          description: Conversation creation failed
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "createConvo",
                "params": {
                  "body": $input.json('$')
                }
            }
        responses:
          default:
            statusCode: "200"
  "/conversation/{id}":
    get:
      tags:
      - conversation
      summary: Find conversation
      description: Returns a single conversation
      operationId: getConvo
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of conversation
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/Conversation"
        '404':
          description: Conversation not found
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates:
          'application/json': >
            {
                "fun" : "getConvo",
                "params": {
                  "id": "$input.params('id')"
                }
            }
        responses:
          default:
            statusCode: "200"
  "/message":
    post:
      tags:
      - message
      summary: Create a message
      description: ''
      operationId: createMessage
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: create message using the param provided
        required: true
        schema:
          "$ref": "#/definitions/Message"
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/Message"
        '400':
          description: Invalid Message
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "createMessage",
                "params": {
                  "body": "$input.json('$')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/user":
    post:
      tags:
      - user
      summary: Register user
      description: Register user.
      operationId: registerUser
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          "$ref": "#/definitions/User"
      responses:
        default:
          schema:
            "$ref": "#/definitions/User"
          description: successful operation
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "createUser",
                "params": {
                  "body": "$input.json('$')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/user/{id}":
    get:
      tags:
      - user
      summary: Get user
      description: ''
      operationId: getUser
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id of a user
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/User"
        '400':
          description: Invalid user info supplied
        '404':
          description: User not found
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "getUser",
                "params": {
                  "id": "$input.params('id')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/createConvoLink":
    post:
      tags:
      - convoLink
      summary: Add a new convoLink
      description: ''
      operationId: createConvoLink
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: ConvoLink object that needs to be added
        required: true
        schema:
          "$ref": "#/definitions/ConvoLink"
      responses:
        '405':
          description: Invalid input
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "createConvoLink",
                "params": {
                  "body": "$input.json('$')"
                }
            }
        responses: 
          default:
            statusCode: "200"
    put:
      tags:
      - convoLink
      summary: Update an existing convoLink
      description: ''
      operationId: updateConvoLink
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: ConvoLink object that needs to be added to the store
        required: true
        schema:
          "$ref": "#/definitions/ConvoLink"
      responses:
        '404':
          description: ConvoLink not found
        '405':
          description: Validation exception
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "updateConvoLink",
                "params": {
                  "body": "$input.json('$')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/detectCelebs/{bucket}/{key}":
    get:
      tags:
      - ai
      summary: Detect Celebs
      description: ''
      operationId: detectCelebs
      produces:
      - application/json
      parameters:
      - name: bucket
        in: path
        description: bucket
        required: true
        type: string
      - name: key
        in: path
        description: key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/AI"
        '400':
          description: Invalid bucket or key is supplied
        '404':
          description: AI not found
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "detectCelebs",
                "params": {
                  "bucket": "$input.params('bucket')",
                  "key": "$input.params('key')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/detectLabels/{bucket}/{key}":
    get:
      tags:
      - ai
      summary: Detect Labels
      description: ''
      operationId: detectLabels
      produces:
      - application/json
      parameters:
      - name: bucket
        in: path
        description: bucket
        required: true
        type: string
      - name: key
        in: path
        description: key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/AI"
        '400':
          description: Invalid bucket or key is supplied
        '404':
          description: AI not found
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "detectLabels",
                "params": {
                  "bucket": "$input.params('bucket')",
                  "key": "$input.params('key')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/detectLanguage/{text}":
    get:
      tags:
      - ai
      summary: Detect Language
      description: ''
      operationId: detectLanguage
      produces:
      - application/json
      parameters:
      - name: text
        in: path
        description: text
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/AI"
        '400':
          description: Invalid bucket or key is supplied
        '404':
          description: AI not found
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "detectLanguage",
                "params": {
                  "bucket": "$input.params('text')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/detectEntities/{language}/{text}":
    get:
      tags:
      - ai
      summary: Detect Entities
      description: ''
      operationId: detectEntities
      produces:
      - application/json
      parameters:
      - name: language
        in: path
        description: language
        required: true
        type: string
      - name: text
        in: path
        description: text
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/AI"
        '400':
          description: Invalid bucket or key is supplied
        '404':
          description: AI not found
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "detectEntities",
                "params": {
                  "language": "$input.params('language')",
                  "text": "$input.params('text')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/detectSentiment/{language}/{text}":
    get:
      tags:
      - ai
      summary: Detect Sentiment
      description: ''
      operationId: detectSentiment
      produces:
      - application/json
      parameters:
      - name: language
        in: path
        description: language
        required: true
        type: string
      - name: text
        in: path
        description: text
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/AI"
        '400':
          description: Invalid bucket or key is supplied
        '404':
          description: AI not found
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "detectSentiment",
                "params": {
                  "language": "$input.params('language')",
                  "text": "$input.params('text')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/invokeBot/{bot}/{text}":
    get:
      tags:
      - ai
      summary: Detect Sentiment
      description: ''
      operationId: detectSentiment
      produces:
      - application/json
      parameters:
      - name: bot
        in: path
        description: bot
        required: true
        type: string
      - name: text
        in: path
        description: text
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/AI"
        '400':
          description: Invalid bucket or key is supplied
        '404':
          description: AI not found
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "invokeBot",
                "params": {
                  "bot": "$input.params('bot')",
                  "text": "$input.params('text')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/dictate/{bucket}/{key}/{voice}/{text}":
    get:
      tags:
      - ai
      summary: Detect Sentiment
      description: ''
      operationId: detectSentiment
      produces:
      - application/json
      parameters:
      - name: bucket
        in: path
        description: bucket
        required: true
        type: string
      - name: key
        in: path
        description: key
        required: true
        type: string
      - name: voice
        in: path
        description: voice
        required: true
        type: string
      - name: text
        in: path
        description: text
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/AI"
        '400':
          description: Invalid bucket or key is supplied
        '404':
          description: AI not found
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "dictate",
                "params": {
                  "bucket": "$input.params('bucket')",
                  "key": "$input.params('key')",
                  "voice": "$input.params('voice')",
                  "text": "$input.params('text')"
                }
            }
        responses: 
          default:
            statusCode: "200"
  "/translate/{language}/{text}":
    get:
      tags:
      - ai
      summary: Translate
      description: ''
      operationId: translate
      produces:
      - application/json
      parameters:
      - name: language
        in: path
        description: language
        required: true
        type: string
      - name: text
        in: path
        description: text
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/AI"
        '400':
          description: Invalid bucket or key is supplied
        '404':
          description: AI not found
      x-amazon-apigateway-integration:
        type: "aws"
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:180951574562:function:chatql-apsync-backend-dev-RedirectFunc/invocations"
        httpMethod: "POST"
        requestTemplates: 
          'application/json': >
            {
                "fun" : "createConvoLink",
                "params": {
                  "bucket": "$input.params('language')",
                  "key": "$input.params('text')"
                }
            }
        responses: 
          default:
            statusCode: "200"
parameters:
  username:
    name: username
    in: path
    description: 'The name that needs to be fetched. Use user1 for testing.'
    required: true
    type: string
definitions:
  AI:
    type: object
    properties:
      bucket:
        type: string
      key:
        type: string
      bot:
        type: string
      text:
        type: string
      language:
        type: string
      voice:
        type: string
      response:
        type: object
  User:
    type: object
    required:
    - id
    - username
    properties:
      id:
        type: string
      username:
        type: string
      registered:
        type: boolean
      userConversations:
        type: array
        items:
          "$ref": "#/definitions/Conversation"
  ConvoLink:
    type: object
    required:
    - id
    properties:
      id:
        type: string
      name:
        type: string
      status:
        type: string
      convoLinkUserId:
        type: string
      user:
        "$ref": "#/definitions/User"
      conversation:
        "$ref": "#/definitions/Conversation"
  S3Object:
    type: object
    required:
    - bucket
    - region
    - key
    properties:
      bucket:
        type: string
      region:
        type: string
      key:
        type: string
  Conversation:
    type: object
    required:
    - id
    - name
    properties:
      id:
        type: string
      name:
        type: string
      createdAt:
        type: string
      messages:
        type: array
        items:
          "$ref": "#/definitions/Message"
      associatedConverLinkId:
        type: string
  Message:
    type: object
    required:
    - id
    properties:
      id:
        type: string
      content:
        type: string
      createdAt:
        type: string
      owner:
        type: string
      chatbot:
        type: boolean
      isSent: 
        type: boolean
      file: 
        "$ref": "#/definitions/S3Object"
      conversationId: 
        type: string
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string